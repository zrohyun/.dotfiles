#!/bin/bash
##############################################################################
########################### zrohyun custom aliases ###########################
##############################################################################

# Unix
alias ln="ln -v"
alias mkdir="mkdir -vp"

# handy short cuts #
alias h='history'
alias j='jobs -l'
alias c='clear'
alias now='date'
alias hg='history|grep'
alias shell='echo $SHELL'

if [[ -f /etc/hosts ]]; then
    #TODO: if $UID =0 no sudo
    if [[ $UID == 0 ]]; then
        alias vihosts='vi hosts'
    else
        alias vihosts='sudo vi hosts'
    fi
    alias hosts='cat /etc/hosts'
fi

# TODO: 
# hosts
# hardware: sudo lshw -short
# cpu: cat /proc/cpuinfo
# ram: cat /proc/meminfo
# hdd: fdisk -l
# gpu: nvidia-smi or lspci | grep VGA or sudo lshw -C display or nvtop or nvitop or gpustat

# IP
# if command -v ifconfig &> /dev/null; then
#     alias privateip="ifconfig | grep -A 5 -E 'eth0:|en0:' | grep 'inet ' | awk '{ print $2 }'"
# fi
# if curl -s --max-time 1 ifconfig.me > /dev/null; then
#     alias myip='curl ifconfig.me'
#     alias ip=myip
# elif curl -s --max-time 1 icanhazip.com > /dev/null; then
#     alias myip='curl icanhazip.com'
#     alias ip=myip
# elif command -v dig &> /dev/null; then
#     alias myip='dig +short myip.opendns.com @resolver1.opendns.com'
#     alias ip=myip
#     # alias myip="dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'\"' '{ print \$2 }'"
# fi
function print_my_ip_info() {
    # Private IP 찾기
    local private_ip=""
    if command -v ifconfig &> /dev/null; then
        private_ip=$(ifconfig | grep -A 5 -E 'eth0:|en0:' | grep 'inet ' | awk '{ print $2 }')
    fi

    # Public IP 찾기
    local public_ip=""
    if curl -s --max-time 1 ifconfig.me > /dev/null; then
        public_ip=$(curl -s ifconfig.me)
    elif curl -s --max-time 1 icanhazip.com > /dev/null; then
        public_ip=$(curl -s icanhazip.com)
    elif command -v dig &> /dev/null; then
        public_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
    fi

    # IP 정보 출력
    echo "Private IP: $private_ip"
    echo "Public IP: $public_ip"
}

alias myip=print_my_ip_info
alias ip=myip

if [[ $SHELL == *"zsh"* ]]; then
    alias reload="source $HOME/.zshrc"
    # alias reload="omz reload"
elif [[ $SHELL == *"bash"* ]] && [[ -e $HOME/.bashrc ]]; then
    alias reload=". $HOME/.bashrc"
fi


#TODO: export 분리, export, path, etc.. load 순서 결정
if command -v hx &>/dev/null; then
    export EDITOR=hx
    export VISUAL=hx
elif command -v vim &>/dev/null; then
    export EDITOR=vim
    export VISUAL=vim
elif command -v vi &>/dev/null; then
    export EDITOR=vi
    export VISUAL=vi
elif command -v nano &>/dev/null; then
    export EDITOR=nano
    export VISUAL=nano
elif command -v emacs &>/dev/null; then
    export EDITOR=emacs
    export VISUAL=emacs
fi

alias e="$EDITOR"
alias v="$VISUAL"

if [[ $machine == 'Linux' ]]; then
    alias os="uname -a && cat /etc/os-release"
elif [[ $machine == 'Mac' ]]; then
    alias os="uname -a && sw_vers && system_profiler SPSoftwareDataType"
fi

# dotfiles
if [[ -d $HOME/.dotfiles ]]; then
    alias dotfiles="cd $HOME/.dotfiles"
fi

# machine directory alias
if [[ $machine == 'Mac' ]]; then
  if [[ -d $HOME ]]; then
    alias home="cd $HOME"
    alias Home="cd $HOME"
  fi

  if [[ -d $HOME/Desktop ]]; then
    alias desktop="cd $HOME/Desktop"
    alias Desktop="cd $HOME/Desktop"
  fi

  if [[ -d $HOME/Downloads ]]; then
    alias downloads="cd $HOME/Downloads"
    alias Downloads="cd $HOME/Downloads"
  fi

  if [[ -d $HOME/obsidian-zro ]]; then
    alias obsidian="cd $HOME/obsidian-zro"
  fi
fi

# Pretty print the path
alias path='echo $PATH | tr -s ":" "\n"'
alias hey='tmux new -As main'
alias hi=hey

# vim command
if command -v hx &> /dev/null; then
    alias vi=hx
elif command -v vim &> /dev/null; then
    alias vi=vim
# else
#   echo "'hx', 'vim' command is not installed"
fi 

# trash command
if command -v trash &> /dev/null; then
    alias rm='trash -v'
    alias rm-list='trash-list'
# else
#   echo "'trash' command is not installed"
fi 

# trash command
if command -v btop &> /dev/null; then
    alias top='btop'
elif command -v htop &>/dev/null; then
    alias top='htop'
# else
#   echo "'trash' command is not installed"
fi 


# tldr command -> cht
if command -v tldr &> /dev/null; then
    alias man='tldr'
elif command -v cht.sh &>/dev/null; then
    alias man='cht.sh'
elif command -v curl &>/dev/null; then
    function cht() {
        curl cht.sh/$1 # https://github.com/chubin/cheat.sh
    }
    alias man=cht
# else
#     echo "'tldr' command is not installed"
fi

# thefuck command
if command -v thefuck &>/dev/null; then
    eval $(thefuck --alias)
# else
    # echo "'thefuck' command is not installed"
fi

# fd
if command -v fdfind &>/dev/null; then
    alias fd='fdfind -aI'
    alias find=fd
fi

# exa
if command -v exa &>/dev/null; then
    alias ls='exa --icons'
    alias la='ls -lah'
fi

if command -v lsd &>/dev/null; then
    alias ls='lsd'
    alias la='lsd -lah'
    alias ll='lsd -lh'
fi

#TODO: alias 등록하려고 했으나 cd했을 때 $HOME으로 안감.
# 추후 수정하거나 그냥 alias 등록하지 않는 것으로 해야할 듯
# if command -v z &>/dev/null; then
#   alias cd=z
# fi

# NOT MUST HAVE ITEM

# KUBERNETES
if command -v k9s &>/dev/null; then
    alias ks=k9s
fi
if command -v kubectl &>/dev/null; then
    # ref: https://kubernetes.io/docs/reference/kubectl/quick-reference/
    # short alias to set/show context/namespace (only works for bash and bash-compatible shells, current context to be set before using kn to set namespace)
    #TODO: print node info with label or traint or something
    alias kx='f() { [ "$1" ] && kubectl config use-context $1 || kubectl config current-context ; } ; f'
    alias kn='f() { [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ; } ; f'
fi

# bat
if command -v batcat &>/dev/null; then
    alias bat='batcat'
fi

# duf
if command -v duf &>/dev/null; then
    alias df='duf'
fi

# dust
if command -v dust &>/dev/null; then
    alias du='dust'
fi

# nc, telnet
if command -v nc &>/dev/null; then
    alias nc='echo -ne "99||\x00" | nc -v'
    alias telnet=nc
    #?
    # alias conn=nc
    # alias acl=nc
elif command -v telnet &>/dev/null; then
    conn() {
        # Usage Example
        # $ conn localhost 80
        echo "Connecting with telnet"
        echo -e "^]" | telnet $1 $2
    }
    alias nc=conn
    alias telnet=nc
elif command -v $(which bash) &>/dev/null; then
    conn() {
        verbose=0
        while getopts ":v" opt; do
            case ${opt} in
                v )
                    verbose=1
                    ;;
                \? )
                    echo "Invalid option: $OPTARG" 1>&2
                    return 1
                    ;;
            esac
        done
        shift $((OPTIND -1))

        host=$1
        port=$2

        if [ $verbose -eq 1 ]; then
            echo "Verbose mode on"
            echo "Connecting to $host on port $port"
        fi

        if [ $# -lt 2 ]; then
            echo "Usage: nc [-v verbose] [host] [port]"
            return 1
        fi
        echo "$(which bash) -c echo > '/dev/tcp/$host/$port' 2>/dev/null"
        $(which bash) -c "echo > /dev/tcp/$host/$port" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "Connection to $host port $port succeeded!"
        else
            echo "Connection to $host port $port failed!"
        fi
    }
    alias nc=conn
    alias telnet=nc
elif command -v curl &>/dev/null; then
    conn() {
        verbose=0
        while getopts ":v" opt; do
            case ${opt} in
                v )
                    verbose=1
                    ;;
                \? )
                    echo "Invalid option: $OPTARG" 1>&2
                    return 1
                    ;;
            esac
        done
        shift $((OPTIND -1))

        host=$1
        port=$2

        if [ $# -lt 2 ]; then
            echo "Usage: nc [-v verbose] [host] [port]"
            return 1
        fi

        if [ $verbose -eq 1 ]; then
            echo "Verbose mode on"
            echo "Connecting to $host on port $port"
            curl -v telnet://$host:$port
        else
            curl telnet://$host:$port
        fi 
    }
    alias nc=conn
    alias telnet=nc
fi

# network
#TODO: print port with title, and pid
if [[ $machine == "Linux" ]]; then
    openports() {
        local sudo_cmd=""
        local arg="${1:-default}"

        if [[ "$arg" == "-h" || "$arg" == "help" ]]; then
            echo "Usage: openports [sudo] [command]"
            echo "Options:"
            echo "  sudo     : Run with elevated privileges (requires sudo)"
            echo "  command  : Specify a specific command (netstat, lsof, nmap, ss)"
            echo "  -p       : [TODO]Show the PID of open ports"
            return 0
        fi

        if [[ "$arg" == "sudo" ]]; then
            if command -v sudo &>/dev/null; then
                if sudo -v &>/dev/null; then
                    sudo_cmd="sudo"
                    arg="${2:-default}"
                    # shift  # Remove "sudo" from the arguments
                else
                    echo "Error: sudo permission is required to run this command."
                    exit 1
                fi
            else
                echo "Error: sudo command not found. Please install sudo."
                exit 1
            fi
        fi

        local commands=("netstat" "lsof" "nmap" "ss")
        for cmd in "${commands[@]}"; do
            if [[ $arg == "default" ]] || [[ $cmd == $arg ]]; then
                if command -v "$cmd" &>/dev/null; then
                    echo "Checking open ports using $cmd..."
                    case "$cmd" in
                        "lsof")
                            echo "$sudo_cmd lsof -i -P -n | grep LISTEN"
                            $sudo_cmd lsof -i -P -n | grep LISTEN
                            ;;
                        "netstat")
                            echo "$sudo_cmd netstat -tuln"
                            $sudo_cmd netstat -tuln
                            ;;
                        "ss")
                            echo "$sudo_cmd ss -tuln"
                            $sudo ss -tuln
                            ;;
                        "nmap")
                            echo "$sudo_cmd nmap -p 1-65535 localhost"
                            $sudo_cmd nmap -p 1-65535 localhost
                            ;;
                    esac
                    return 0
                else
                    echo "$cmd is not installed"
                fi
            # else
            #     echo "$cmd is not your command($arg)"
            fi
        done

        echo "No suitable command found for checking open ports."
        return 1
    }
elif [[ $machine == "Mac" ]]; then
    openports() {
        local sudo_cmd=""
        local arg="${1:-default}"

        if [[ "$arg" == "-h" || "$arg" == "help" ]]; then
            echo "Usage: openports [sudo] [command]"
            echo "Options:"
            echo "  sudo     : Run with elevated privileges (requires sudo)"
            echo "  command  : Specify a specific command (netstat, lsof, nmap, ss)"
            echo "  -p       : [TODO]Show the PID of open ports"
            return 0
        fi

        if [[ "$arg" == "sudo" ]]; then
            if command -v sudo &>/dev/null; then
                if sudo -v &>/dev/null; then
                    sudo_cmd="sudo"
                    arg="${2:-default}"
                else
                    echo "Error: sudo permission is required to run this command."
                    return 1
                fi
            else
                echo "Error: sudo command not found. Please install sudo."
                return 1
            fi
        fi

        # TODO: if commands안에 $cmd가 없다면 
        # TODO: open된 port의 PID 출력(Implement checking for open port PID)
        local commands=("netstat" "lsof" "nmap" "ss")

        for cmd in "${commands[@]}"; do
            if [[ $arg == "default" ]] || [[ $cmd == $arg ]]; then
                if command -v "$cmd" &>/dev/null; then
                    echo "Checking open ports using $cmd..."
                    case "$cmd" in
                        "lsof")
                            echo "$sudo_cmd lsof -i -P -n | grep LISTEN"
                            $sudo_cmd lsof -i -P -n | grep LISTEN
                            ;;
                        "netstat")
                            echo "$sudo_cmd netstat -an | grep LISTEN"
                            $sudo_cmd netstat -an | grep LISTEN
                            ;;
                        "ss")
                            echo "$sudo_cmd ss -tuln | grep LISTEN"
                            $sudo_cmd ss -tuln | grep LISTEN
                            ;;
                        "nmap")
                            echo "$sudo_cmd nmap -p 1-65535 localhost"
                            $sudo_cmd nmap -p 1-65535 localhost
                            ;;
                    esac
                    return 0
                else
                    echo "$cmd is not installed"
                    return 1
                fi
            fi
        done

        echo "No suitable command found for checking open ports."
        return 1
    }
fi

