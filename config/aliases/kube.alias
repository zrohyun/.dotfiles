#!/bin/bash

# KUBERNETES
if command -v k9s &>/dev/null; then
    alias ks=k9s
fi

if command -v kubectl &>/dev/null; then
    # ref: https://kubernetes.io/docs/reference/kubectl/quick-reference/
    # short alias to set/show context/namespace (only works for bash and bash-compatible shells, current context to be set before using kn to set namespace)
    #TODO: print node info with label or taint or something
    # alias kap='f() { [ "$1" ] && kubectl apply -f $1 } ; f'
    alias kcl='k config get-clusters'

    : '
    # !NOTE
    # kubeconfig path를 ':'로 여러 파일 연결해서 설정할 경우 `k config use-context $context_name` 명령어를 사용했을 때 config에서 출돌발생
    # a context가 존재하지 않는 b_config 혹은 그 반대의 경우에도 current-context가 모두 $context_name으로 설정된다. 그렇게 되면 단일 파일로 config를 설정하게 되면
    # 아예 존재하지 않는 context로 설정이 되어버리는 에러가 발생할 수 있음. 이런 문제 때문에 config use-context를 사용하면서 ':'로 여러 파일을 연결하는 게 좋지 않음.
    '

    kx() {
        # !NOTE: alias시에 omz에서 함수라고 인식 못함.
        # alias kx='kx() { [ "$1" ] && kubectl config use-context $1 || kubectl config current-context ; } ; kx'
        [ "$1" ] && kubectl config use-context $1 || kubectl config current-context ;
    }
    kn() {
        # alias kn='kn() { [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ; } ; kn'
        [ "$1" ] && kubectl config set-context --current --namespace $1 || kubectl config view --minify | grep namespace | cut -d" " -f6 ;
    }
    ku_kx() {
        kx $1
    }
    ku_kn() {
        kn $1
    }
    # # k8s network troubleshooting
    kubenet() {
        # alias knetshoot='knetshoot() { kubectl run netshoot --rm -it --image ${1:-nicolaka/netshoot} -- bash } ; knetshoot'
        kubectl run netshoot --rm -it --image ${1:-nicolaka/netshoot} -- bash
    }
    kububuntu() {
        # alias kubuntu='f() { kubectl run ubuntu --rm -it --image ${1:-ubuntu:24.04} -- bash } ; f'
        kubectl run ubuntu --rm -it --image ${1:-ubuntu:24.04} -- bash
    }
    kubbusybox() {
        # alias kbusybox='f() { kubectl run ubuntu --rm -it --image ${1:-busybox} -- bash } ; f'
        kubectl run ubuntu --rm -it --image ${1:-busybox} -- bash
    }
fi

select_kubeconfig() {
    # Select a config file from the files in the $HOME/.kube directory
    # Usage: select_kubeconfig [KUBE_DIR]
    # KUBE_DIR: Optional parameter to specify the directory containing kubeconfig files (default: $HOME/.kube)

    # Check if help is requested
    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        echo "Usage: select_kubeconfig [KUBE_DIR]"
        echo "KUBE_DIR: Optional parameter to specify the directory containing kubeconfig files (default: $HOME/.kube)"
        return 0
    fi

        # If no argument is provided, inform the user about the default KUBE_DIR
    if [[ -z "$1" ]]; then
        echo "No KUBE_DIR specified. Using default: $HOME/.kube"
    fi

    export KUBE_DIR=${1:-"$HOME/.kube"}
    if [[ ! -d "$KUBE_DIR" ]]; then
        # echo "Directory $KUBE_DIR does not exist."
        return 0
    fi
    # 파일 목록 가져오기
    files=($(find "$KUBE_DIR" -type f -name "*config*"))
    
    if command -v fzf >/dev/null 2>&1; then
        # fzf가 설치되어 있으면 fzf를 사용하여 파일 선택
        selected_config=$(printf "%s\n" "${files[@]}" | fzf)
    elif command -v select >/dev/null 2>&1; then
        # fzf가 없으면 select 문을 사용하여 파일 선택
        echo "fzf is not installed. Please select a file by typing the number."
        select selected_config in "${files[@]}"; do
            if [ -n "$selected_config" ]; then
                break
            else
                echo "Invalid selection. Please try again."
            fi
        done
    else
        # 파일 목록을 사용자에게 표시
        echo "Select a file by entering the corresponding number:"
        for i in "${!files[@]}"; do
        echo "[$i] ${files[$i]##*/}"
        done

        # 사용자 입력 받기
        read -p "Enter number: " file_index

        # 입력값 검증
        if ! [[ "$file_index" =~ ^[0-9]+$ ]] || [ "$file_index" -ge "${#files[@]}" ]; then
        echo "Invalid selection"
        exit 1
        fi

        # 선택한 파일 경로
        selected_file="${files[$file_index]}"
    fi


    # 선택된 파일이 있으면 KUBECONFIG에 할당
    if [ -n "$selected_config" ]; then
        export KUBECONFIG="$selected_config"
        echo "KUBECONFIG set to $selected_config"
    else
        # 기본 config $HOME/.kube/config
        # export KUBECONFIG="${selected_config:-$HOME/.kube/config}"
        echo "No kubeconfig selected."
    fi
}
alias sk="select_kubeconfig"